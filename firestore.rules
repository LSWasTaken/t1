rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Players collection rules
    match /players/{userId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      // Allow write if user is the owner of the document
      allow write: if isOwner(userId);
      // Allow listing players with status=online
      allow list: if isAuthenticated() && 
        request.query.limit <= 10 && 
        request.query.filters.size() == 1 && 
        request.query.filters[0].op == '==' && 
        request.query.filters[0].field == 'status' && 
        request.query.filters[0].value == 'online';
    }

    // Matches collection rules
    match /matches/{matchId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      // Allow write if user is authenticated and is a player in the match
      allow write: if isAuthenticated() && 
        request.resource.data.players.hasAny([request.auth.uid]);
    }

    // Leaderboard collection rules
    match /leaderboard/{playerId} {
      allow read, list: if true;
      allow create, update: if request.auth != null && request.auth.uid == playerId;
      allow delete: if false;
    }

    // Duel Requests collection rules
    match /duelRequests/{requestId} {
      allow read, create, update: if request.auth != null;
      allow delete: if false;
    }

    // Battle History collection rules
    match /battleHistory/{docId} {
      allow read, create, update: if request.auth != null;
      allow delete: if false;
    }
  }
} 