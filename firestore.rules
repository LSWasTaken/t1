rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isOnline() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/players/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/players/$(request.auth.uid)).data.status == 'online';
    }
    
    function isInQueue() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/players/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/players/$(request.auth.uid)).data.inQueue == true;
    }
    
    function isInMatch() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/players/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/players/$(request.auth.uid)).data.currentMatch != null;
    }
    
    function isInTanzaMatch() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/players/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/players/$(request.auth.uid)).data.currentTanzaMatch != null;
    }

    function isMatchParticipant(matchId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/matches/$(matchId)).data.player1Id == request.auth.uid ||
        get(/databases/$(database)/documents/matches/$(matchId)).data.player2Id == request.auth.uid
      );
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Players collection
    match /players/{playerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == playerId;
      allow update: if isAuthenticated() && (
        request.auth.uid == playerId || 
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['inQueue', 'status', 'currentMatch', 'lastActive']))
      );
      allow delete: if isOwner(playerId);
    }

    // Matches collection
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.player1Id == request.auth.uid || 
        request.resource.data.player2Id == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.player1Id == request.auth.uid ||
        resource.data.player2Id == request.auth.uid
      );
      allow delete: if false; // Matches cannot be deleted
    }

    // Tanza matches collection
    match /tanza_matches/{matchId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.player1Id == request.auth.uid ||
        request.resource.data.player2Id == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.player1Id == request.auth.uid ||
        resource.data.player2Id == request.auth.uid
      );
      allow delete: if false; // Tanza matches cannot be deleted
    }

    // Connections collection
    match /_connections/{connectionId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == connectionId;
    }
  }
}
